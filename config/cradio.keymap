// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

// Layers
#define HOME_LAYER 0
#define NUM_LAYER 1
#define LOCK_LAYER 2

// Norwegian translations
#define _fslh LS(N7)
#define _bslh EQUAL
#define _semi LS(COMMA)
#define _colon LS(DOT)
#define _excl LS(N1)
#define _at RA(N2)
#define _lbrc RA(N7)
#define _rbrc RA(N0)
#define _equal LS(N0)
#define _plus MINUS
#define _star PIPE
#define _dqt LS(N2)
#define _lpar LS(N8)
#define _rpar LS(N9)
#define _dollar RA(N4)
#define _minus FSLH
#define _prcnt LS(N5)
#define _lbkt RA(N8)
#define _rbkt RA(N9)
#define _under QMARK
#define _pipe GRAVE
#define _para LS(GRAVE)
#define _ldang RA(Z)
#define _rdang RA(X)
#define _qmark UNDER
#define _aa LBKT
#define _hash LS(N3)
#define _sqt BSLH
#define _lt RA(LS(Z))
#define _gt RA(LS(X))
#define _amps LS(N6)
#define _oe SEMI
#define _euro RA(E)
#define _ae SQT

#define _caret RBRC
#define _grave LS(EQUAL)
#define _tilde RA(RBKT)
#define _acute RA(EQUAL)
#define _umlaut RA(LBKT)

#define caps_char &sl SHIFT_LAYER

// [Left|Right] [altGr|Alt|Meta|Ctrl] modifiers
#define lg(k1) &left_hold_tap RALT k1
#define rg(k1) &right_hold_tap RALT k1
#define la(k1) &left_hold_tap LALT k1
#define ra(k1) &right_hold_tap LALT k1
#define lm(k1) &left_hold_tap LGUI k1
#define rm(k1) &right_hold_tap LGUI k1
#define lc(k1) &left_hold_tap LCTRL k1
#define rc(k1) &right_hold_tap LCTRL k1

#define left_half 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33
#define right_half 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33

&caps_word {
    continue-list = <_under _minus BKSP DEL>;
};

/ {
    behaviors {
        left_hold_tap: left_hold_tap {
            label = "left_hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            retro-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <left_half>;
        };
        right_hold_tap: right_hold_tap {
            label = "right_hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            retro-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <right_half>;
        };

        excl_pipe: excl_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "excl_pipe";
            #binding-cells = <0>;
            bindings = <&kp _excl>, <&kp _pipe>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        at_para: at_para {
            compatible = "zmk,behavior-mod-morph";
            label = "at_para";
            #binding-cells = <0>;
            bindings = <&kp _at>, <&kp _para>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbrc_ldang: lbrc_ldang {
            compatible = "zmk,behavior-mod-morph";
            label = "lbrc_ldang";
            #binding-cells = <0>;
            bindings = <&kp _lbrc>, <&kp _ldang>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rbrc_rdang: rbrc_rdang {
            compatible = "zmk,behavior-mod-morph";
            label = "rbrc_rdang";
            #binding-cells = <0>;
            bindings = <&kp _rbrc>, <&kp _rdang>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        equal_qmark: equal_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "equal_qmark";
            #binding-cells = <0>;
            bindings = <&kp _equal>, <&kp _qmark>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        star_hash: star_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "star_hash";
            #binding-cells = <0>;
            bindings = <&kp _star>, <&kp _hash>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dqt_sqt: dqt_sqt {
            compatible = "zmk,behavior-mod-morph";
            label = "dqt_sqt";
            #binding-cells = <0>;
            bindings = <lg(_dqt)>, <lg(_sqt)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "lpar_lt";
            #binding-cells = <0>;
            bindings = <la(_lpar)>, <la(_lt)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "rpar_gt";
            #binding-cells = <0>;
            bindings = <lc(_rpar)>, <lc(_gt)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dollar_amps: dollar_amps {
            compatible = "zmk,behavior-mod-morph";
            label = "dollar_amps";
            #binding-cells = <0>;
            bindings = <&kp _dollar>, <&kp _amps>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        fslh_bslh: fslh_prcnt {
            compatible = "zmk,behavior-mod-morph";
            label = "fslh_bslh";
            #binding-cells = <0>;
            bindings = <&kp _fslh>, <&kp _bslh>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        caret_tilde: caret_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "caret_tilde";
            #binding-cells = <0>;
            bindings = <&kp _caret>, <&kp _tilde>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbkt_grave: lbkt_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "lbkt_grave";
            #binding-cells = <0>;
            bindings = <&kp _lbkt>, <&kp _grave>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rbkt_acute: rbkt_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "rbkt_acute";
            #binding-cells = <0>;
            bindings = <&kp _rbkt>, <&kp _acute>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_home: plus_home {
            compatible = "zmk,behavior-mod-morph";
            label = "plus_home";
            #binding-cells = <0>;
            bindings = <&kp _plus>, <&kp HOME>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        under_prcnt: under_prcnt {
            compatible = "zmk,behavior-mod-morph";
            label = "under_prcnt";
            #binding-cells = <0>;
            bindings = <&kp _under>, <&kp _prcnt>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n7_pgdn: n7_pgdn {
            compatible = "zmk,behavior-mod-morph";
            label = "n7_pgdn";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp PG_DN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n8_pgup: n8_pgup {
            compatible = "zmk,behavior-mod-morph";
            label = "n8_pgup";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp PG_UP>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n9_end: n9_end {
            compatible = "zmk,behavior-mod-morph";
            label = "n9_end";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp END>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_left: minus_left {
            compatible = "zmk,behavior-mod-morph";
            label = "minus_left";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp LEFT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n4_down: n4_down {
            compatible = "zmk,behavior-mod-morph";
            label = "n4_down";
            #binding-cells = <0>;
            bindings = <rc(N4)>, <rc(DOWN)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n5_up: n5_up {
            compatible = "zmk,behavior-mod-morph";
            label = "n5_up";
            #binding-cells = <0>;
            bindings = <ra(N5)>, <ra(UP)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n6_right: n6_right {
            compatible = "zmk,behavior-mod-morph";
            label = "n6_right";
            #binding-cells = <0>;
            bindings = <rg(N6)>, <rg(RIGHT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n0_del: n0_del {
            compatible = "zmk,behavior-mod-morph";
            label = "n0_del";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n1_ins: n1_ins {
            compatible = "zmk,behavior-mod-morph";
            label = "n1_ins";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp INS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n3_pscrn: n3_pscrn {
            compatible = "zmk,behavior-mod-morph";
            label = "n3_pscrn";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp PSCRN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        _shift: _shift {
            compatible = "zmk,behavior-tap-dance";
            label = "_shift";
            #binding-cells = <0>;
            tapping-term-ms = <600>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_lock {
            timeout-ms = <50>;
            key-positions = <0 1 2>;
            bindings = <&to LOCK_LAYER>;
            layers = <0>;
        };
        combo_unlock {
            timeout-ms = <50>;
            key-positions = <0 1 2>;
            bindings = <&to HOME_LAYER>;
            layers = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home_layer {
            bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  q       │  w       │  e       │  r       │  t       │ │  y       │  u       │  i       │  o       │  p       │
    &kp Q      &kp W      &kp E      &kp R      &kp T        &kp Y      &kp U      &kp I      &kp O      &kp P
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  a       │  s       │  d       │  f       │  g       │ │  h       │  j       │  k       │  l       │  BKSP    │
    &kp A      lg(S)      la(D)      lc(F)      &kp G        &kp H      rc(J)      ra(K)      rg(L)      &kp BKSP
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  z       │  x       │  c       │  v       │  b       │ │  n       │  m       │  ,;      │  .:      │  ENTER   │
    &kp Z      &kp X      &kp C      &kp V      &kp B        &kp N      &kp M     &kp COMMA   &kp DOT    &kp ENTER
//                      ╭───────────────┬────────────────╮ ╭────────────────┬───────────────╮
                          &_shift         lm(SPACE)          &sl NUM_LAYER    &kp ESC
            >;
        };

        num_layer {
            bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  !|      │  @§      │  {«      │  }»      │  =?      │ │  +HOME   │  7PGDN   │  8PGUP   │  9END    │  å       │
   &excl_pipe &at_para  &lbrc_ldang&rbrc_rdang&equal_qmark  &plus_home  &n7_pgdn   &n8_pgup   &n9_end    &kp _aa
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  *#      │  "'      │  (<      │  )>      │  $&      │ │  -LEFT   │  4DOWN   │  5UP     │  6RIGHT  │  ø       │
   &star_hash  &dqt_sqt   &lpar_lt   &rpar_gt &dollar_amps  &minus_left &n4_down   &n5_up     &n6_right  &kp _oe
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  /\\     │  ^~      │  [`      │  ]´      │  _%      │ │  0DEL    │  1INS    │  2       │  3PSCRN  │  æ       │
   &fslh_bslh&caret_tilde&lbkt_grave&rbkt_acute&under_prcnt  &n0_del    &n1_ins    &kp N2     &n3_pscrn  &kp _ae
//                      ╭───────────────┬────────────────╮ ╭────────────────┬───────────────╮
                          &_shift         lm(TAB)            &to NUM_LAYER    &to HOME_LAYER
            >;
        };

        lock_layer {
            bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &none      &none      &none      &none      &none        &none      &none      &none      &none      &none
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &none      &none      &none      &none      &none        &none      &none      &none      &none      &none
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &none      &none      &none      &none      &none        &none      &none      &none      &none      &none
//                      ╭───────────────┬────────────────╮ ╭────────────────┬───────────────╮
                          &none           &none              &none            &none
            >;
        };

    };
};
