// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

// Layers
#define HOME_LAYER 0
#define SHIFT_LAYER 1
#define NUM_LAYER 2
#define NAV_LAYER 3
#define LOCK_LAYER 4

// Norwegian translations
#define _fslh LS(N7)
#define _bslh EQUAL
#define _semi LS(COMMA)
#define _colon LS(DOT)
#define _excl LS(N1)
#define _at RA(N2)
#define _lbrc RA(N7)
#define _rbrc RA(N0)
#define _equal LS(N0)
#define _plus MINUS
#define _star PIPE
#define _dqt LS(N2)
#define _lpar LS(N8)
#define _rpar LS(N9)
#define _dollar RA(N4)
#define _minus FSLH
#define _prcnt LS(N5)
#define _lbkt RA(N8)
#define _rbkt RA(N9)
#define _under QMARK
#define _pipe GRAVE
#define _para LS(GRAVE)
#define _ldang RA(Z)
#define _rdang RA(X)
#define _qmark UNDER
#define _aa LBKT
#define _hash LS(N3)
#define _sqt BSLH
#define _lt RA(LS(Z))
#define _gt RA(LS(X))
#define _amps LS(N6)
#define _oe SEMI
#define _euro RA(E)
#define _ae SQT

#define caps_char &sl SHIFT_LAYER

// [Left|Right] [altGr|Alt|Meta|Ctrl|Sym|Nav] modifiers
#define lg(k1) &left_hold_tap RALT k1
#define rg(k1) &right_hold_tap RALT k1
#define la(k1) &left_hold_tap LALT k1
#define ra(k1) &right_hold_tap LALT k1
#define lm(k1) &left_hold_tap LGUI k1
#define rm(k1) &right_hold_tap LGUI k1
#define lc(k1) &left_hold_tap LCTRL k1
#define rc(k1) &right_hold_tap LCTRL k1
#define ls(k1) &left_layer_tap NUM_LAYER k1
#define rs(k1) &right_layer_tap NUM_LAYER k1
#define ln(k1) &left_layer_tap NAV_LAYER k1
#define rn(k1) &right_layer_tap NAV_LAYER k1

&caps_word {
    continue-list = <_under _minus BKSP DEL>;
};

/ {
    behaviors {
        left_layer_tap: left_layer_tap {
            label = "left_layer_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
        };
        right_layer_tap: right_layer_tap {
            label = "right_layer_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };
        left_hold_tap: left_hold_tap {
            label = "left_hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
        };
        right_hold_tap: right_hold_tap {
            label = "right_hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
        };
        fslh_bslh: fslh_bslh {
            compatible = "zmk,behavior-mod-morph";
            label = "fslh_bslh";
            #binding-cells = <0>;
            bindings = <&right_hold_tap RALT _fslh>, <&right_hold_tap RALT _bslh>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_lock {
            timeout-ms = <50>;
            key-positions = <0 1 2>;
            bindings = <&to LOCK_LAYER>;
            layers = <0>;
        };
        combo_unlock {
            timeout-ms = <50>;
            key-positions = <0 1 2>;
            bindings = <&to HOME_LAYER>;
            layers = <5>;
        };
    };

    macros {
        caret: caret {
            label = "caret";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp RBRC &kp RBRC>;
        };
        grave: grave {
            label = "grave";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            //bindings = <&macro_tap &kp GRAVE &kp GRAVE>;
            bindings = <&macro_tap &kp LS(EQUAL) &kp LS(EQUAL)>;
        };
        tilde: tilde {
            label = "tilde";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            //bindings = <&macro_tap &kp LS(GRAVE) &kp LS(GRAVE)>;
            bindings = <&macro_tap &kp RA(RBKT) &kp RA(RBKT)>;
        };
        acute: acute {
            label = "acute";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            //bindings = <&macro_tap &kp SQT &kp SQT>;
            bindings = <&macro_tap &kp RA(EQUAL) &kp RA(EQUAL)>;
        };
        umlaut: umlaut {
            label = "umlaut";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            //bindings = <&macro_tap &kp DQT &kp DQT>;
            bindings = <&macro_tap &kp RA(LBKT) &kp RA(LBKT)>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        home_layer {
            bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  q       │  w       │  e       │  r       │  t       │ │  y       │  u       │  i       │  o       │  p       │
    &kp Q      &kp W      &kp E      &kp R      &kp T        &kp Y      &kp U      &kp I      &kp O      &kp P
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  a       │  s       │  d       │  f       │  g       │ │  h       │  j       │  k       │  l       │  BKSP    │
    la(A)      lm(S)      lc(D)      ls(F)      &kp G        &kp H      rs(J)      rc(K)      rm(L)      ra(BKSP)
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  z       │  x       │  c       │  v       │  b       │ │  n       │  m       │  ,       │  .       │  /       │
    lg(Z)      &kp X      &kp C      &kp V      &kp B        &kp N      &kp M      &kp COMMA  &kp DOT   &fslh_bslh
//                      ╭───────────────┬────────────────╮ ╭────────────────┬───────────────╮
                          &sk LSHIFT      ln(SPACE)          rn(ESC)          &caps_word
            >;
        };

        shift_layer {
            bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  Q       │  W       │  E       │  R       │  T       │ │  Y       │  U       │  I       │  O       │  P       │
    &kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)  &kp LS(T)    &kp LS(Y)  &kp LS(U)  &kp LS(I)  &kp LS(O)  &kp LS(P)
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  A       │  S       │  D       │  F       │  G       │ │  H       │  J       │  K       │  L       │  BKSP    │
    la(LS(A))  lm(LS(S))  lc(LS(D))  ls(LS(F))  &kp LS(G)    &kp LS(H)  rs(LS(J))  rc(LS(K))  rm(LS(L))  ra(LS(BKSP))
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  Z       │  X       │  C       │  V       │  B       │ │  N       │  M       │  ;       │  :       │  \       │
   lg(LS(Z))   &kp LS(X)  &kp LS(C)  &kp LS(V)  &kp LS(B)    &kp LS(N)  &kp LS(M)  &kp _semi  &kp _colon rg(_bslh)
//                      ╭───────────────┬────────────────╮ ╭────────────────┬───────────────╮
                          &trans          ln(LS(SPACE))      rn(LS(ESC))      &trans
            >;
        };

        num_layer {
            bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  !       │  @       │  {       │  }       │  =       │ │  +       │  7       │  8       │  9       │  ;       │
    &kp _excl  &kp _at    &kp _lbrc  &kp _rbrc  &kp _equal   &kp _plus  &kp N7     &kp N8     &kp N9     &kp _semi
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  *       │  "       │  (       │  )       │  $       │ │  -       │  4       │  5       │  6       │  :       │
    la(_star)  lm(_dqt)   lc(_lpar)  ls(_rpar) &kp _dollar   &kp _minus rs(N4)     rc(N5)     rm(N6)     ra(_colon)
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  %       │  ^       │  [       │  ]       │  _       │ │  0       │  1       │  2       │  3       │  \       │
    lg(_prcnt) &caret     &kp _lbkt  &kp _rbkt  &kp _under   &kp N0     &kp N1     &kp N2     &kp N3     rg(_bslh)
//                      ╭───────────────┬────────────────╮ ╭────────────────┬───────────────╮
                          &trans          ln(TAB)            rn(ENTER)        &trans
            >;
        };

        nav_layer {
            bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  |       │  §       │  «       │  »       │  ?       │ │  HOME    │  PGDN    │  PGUP    │  END     │  å       │
    &kp _pipe  &kp _para  &kp _ldang &kp _rdang &kp _qmark   &kp HOME  &kp PG_DN   &kp PG_UP  &kp END    &kp _aa
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  #       │  '       │  <       │  >       │  &       │ │  LEFT    │  UP      │  DOWN    │  RIGHT   │  ø       │
    la(_hash)  lm(_sqt)   lc(_lt)    ls(_gt)    &kp _amps    &kp LEFT   rs(DOWN)   rc(UP)     rm(RIGHT)  ra(_oe)
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
//│  ¨       │  ~       │  `       │  ´       │  €       │ │  INS     │  DEL     │  PRINT   │          │  æ       │
    &umlaut    &tilde     &grave     &acute     &kp _euro    &kp INS    &kp DEL    &kp PSCRN  &none      rg(_ae)
//                      ╭───────────────┬────────────────╮ ╭────────────────┬───────────────╮
                          &trans          &kp LSHIFT         &kp LSHIFT       &trans
            >;
        };

        lock_layer {
            bindings = <
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &none      &none      &none      &none      &none        &none      &none      &none      &none      &none
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &none      &none      &none      &none      &none        &none      &none      &none      &none      &none
//╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &none      &none      &none      &none      &none        &none      &none      &none      &none      &none
//                      ╭───────────────┬────────────────╮ ╭────────────────┬───────────────╮
                          &none           &none              &none            &none
            >;
        };

    };
};
