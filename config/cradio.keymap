// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MiT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#include "no_nb.h"
#include "34keys.h"
#include "helper.h"

#define L0 0
#define L1 1
#define L2 2

#define k(v) &kp v
#define as(v) &tt LS(v) v
#define b(v) &bt BT_SEL v


&caps_word { continue-list = <_UNDER _MINUS BKSP DEL _AE _OE _AA>; };

ZMK_BEHAVIOR(tt, hold_tap,
    flavor="tap-preferred";
    tapping-term-ms=<200>;
    quick-tap-ms=<100>;
    global-quick-tap;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)
ZMK_BEHAVIOR(ht, hold_tap,
    flavor="balanced";
    tapping-term-ms=<200>;
    quick-tap-ms=<100>;
    global-quick-tap;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

#define SHIFTMORPH(name, bind0, bind1) \
  ZMK_BEHAVIOR(name, mod_morph, \
    bindings = <&tt bind1 bind0>, <&kp bind1>; \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
  )

SHIFTMORPH(slash, _FSLH, _BSLH)
SHIFTMORPH(dot, DOT, _COLON)
SHIFTMORPH(comma, COMMA, _SEMI)
SHIFTMORPH(bksp, BKSP, DEL)

/ {
    macros {
        capsword: capsword {
            label = "capsword";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to L0>, <&caps_word>;
        };
        brc: brc {
            label = "brc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp _LBRC>, <&kp _RBRC>, <&kp LEFT>;
        };
        bkt: bkt {
            label = "bkt";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp _LBKT>, <&kp _RBKT>, <&kp LEFT>;
        };
    };
    combos {
        compatible = "zmk,combos";
        brc {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&brc>;
            layers = <L1>;
        };
        bkt {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&bkt>;
            layers = <L1>;
        };
        left_altgr {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&sk RALT>;
            layers = <L0 L1 L2>;
        };
        left_alt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&sk LALT>;
            layers = <L0 L1 L2>;
        };
        left_ctrl {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&sk LCTRL>;
            layers = <L0 L1 L2>;
        };
        right_ctrl {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&sk LCTRL>;
            layers = <L0 L1 L2>;
        };
        right_alt {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&sk LALT>;
            layers = <L0 L1 L2>;
        };
        right_altgr {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&sk RALT>;
            layers = <L0 L1 L2>;
        };
    };
    keymap {
        compatible = "zmk,keymap";
        layer_0 { bindings = <
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
      as(Q)    as(W)    as(E)    as(R)    as(T)      as(Y)    as(U)    as(I)    as(O)    as(P)
      as(A)    as(S)    as(D)    as(F)    as(G)      as(H)    as(J)    as(K)    as(L)    &bksp
      as(Z)    as(X)    as(C)    as(V)    as(B)      as(N)    as(M)    &comma   &dot     &slash
//  ╰────────┼────────┴────────┼────────┴────────┤ ├────────┴────────┼────────┴────────┼────────╯
               &ht LGUI TAB      &ht LSHIFT SPACE    &sl L1            &sl L2
        >; };
        layer_1 { bindings = <
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
     k(_EXCL) k(_AT)   k(_LBRC) k(_RBRC) k(_EQUAL)  k(_PLUS) k(N7)    k(N8)    k(N9)   as(_AA)
     k(_STAR) k(_DQT)  k(_LPAR) k(_RPAR) k(_DOLLAR) k(_MINUS)k(N4)    k(N5)    k(N6)   as(_OE)
     k(_PRCNT)k(_CARET)k(_LBKT) k(_RBKT) k(_UNDER)  k(N0)    k(N1)    k(N2)    k(N3)   as(_AE)
//  ╰────────┼────────┴────────┼────────┴────────┤ ├────────┴────────┼────────┴────────┼────────╯
               &capsword         &ht LSHIFT ENTER    &kp ESC           &sl L2
        >; };
        layer_2 { bindings = <
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
     k(_PIPE) k(_PARA) k(_LDANG)k(_RDANG)k(_QMARK)  k(HOME)  k(PG_DN) k(PG_UP) k(END)    k(PSCRN)
     k(_HASH) k(_SQT)  k(_LT)   k(_GT)   k(_AMPS)   k(LEFT)  k(DOWN)  k(UP)    k(RIGHT)  as(INS)
     k(_EURO) k(_TILDE)k(_GRAVE)k(_ACUTE) &none   &bt BT_CLR  b(0)    b(1)     b(2)      b(3)
//  ╰────────┼────────┴────────┼────────┴────────┤ ├────────┴────────┼────────┴────────┼────────╯
               &kp LGUI          &kp LSHIFT          &to L0            &sl L2
        >; };
    };
};
